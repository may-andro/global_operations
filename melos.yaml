name: global_ops

environment:
  sdk: '>=2.18.0 <3.0.0'

packages:
  # Include the package in the workspace root.
  - .
  # Include all packages inside the `layer` directory that are direct children.
  - layer/*
  # Include all packages inside the `tool` directory that are direct children.
  - tool/*

scripts:
  # Flutter packages scripts
  version:
    run: flutter --version
    description: Run `flutter version` in all packages.
    exec:
      concurrency: 1
    packageFilters:
      flutter: true

  get:
    run: flutter pub get
    description: Run `flutter pub get` in all packages.
    exec:
      concurrency: 1
    packageFilters:
      flutter: true

  gen:
    run: dart run build_runner build --delete-conflicting-outputs
    description: Run `build_runner` in all packages.
    exec:
      concurrency: 1
    packageFilters:
      dependsOn: build_runner

  analyze_fix:
    run: |
      dart fix --dry-run
      dart fix --apply
      dart format .
      flutter analyze
      flutter pub get
    description: Run `flutter analyze` and fix issues in all packages.
    exec:
      concurrency: 1
    packageFilters:
      flutter: true

  upgrade:
    run: flutter pub upgrade
    description: Run `flutter pub upgrade` in all packages.
    exec:
      concurrency: 1
    packageFilters:
      flutter: true

  # Cleaning commands
  cache_clean:
    run: |
      flutter clean
      flutter pub cache repair
      flutter pub get
    description: Clean cache.
    exec:
      concurrency: 1

  ios_clean:
    run: |
      rm -rf ios/Pods/*
      rm -f ios/Podfile.lock
      rm -r ios/.symlinks
      rm -rf ~/.pub-cache/hosted/pub.dartlang.org/ 
      rm -f ios/Flutter/Flutter.podspec
      flutter clean
      flutter pub get
      cd ios 
      pod cache clean --all
      pod repo update
      cd ..
      flutter pub get
      cd ios
      pod install
    description: Clean cache.

  # Test commands
  test:
    run: flutter test --exclude-tags 'golden'
    description: Run `flutter test` in all packages.
    exec:
      concurrency: 1
    packageFilters:
      flutter: true

  update_golden_test:
    run: flutter test --tags golden --update-goldens
    description: Update `golden` test files in all packages.
    exec:
      concurrency: 1
    packageFilters:
      dependsOn: alchemist

  golden_test:
    run: flutter test --tags golden
    description: Run `golden` tests in all packages.
    exec:
      concurrency: 1
    packageFilters:
      dependsOn: alchemist

  golden_test_in_ci:
    run: flutter test --tags golden --dart-define=CI=true
    description: Run `golden` tests in all packages.
    exec:
      concurrency: 1
    packageFilters:
      dependsOn: alchemist

  # Splash command
  gen_splash:
    run: |
      flutter clean
      flutter pub get
      dart run flutter_native_splash:create --path=native_splash.yaml
    description: Generate splash screen for all flavors.
    exec:
      concurrency: 1
    packageFilters:
      dependsOn: flutter_native_splash

  gen_icon:
    run: |
      flutter pub run flutter_launcher_icons -f flutter_launcher_icons.yaml
    description: Generate icons for the app.
    exec:
      concurrency: 1
    packageFilters:
      dependsOn: flutter_launcher_icons

  gen_translations:
    run: |
      flutter gen-l10n
    description: Generate locale for the app.
    exec:
      concurrency: 1
    packageFilters:
      dependsOn: flutter_localizations


  # Run commands
  run_prod:
    run: flutter run lib/main.dart  --dart-define=build_env=prod
    description: Run the app in prod env.

  run_prod_release:
    run: flutter run lib/main.dart  --dart-define=build_env=prod --release
    description: Run the release app in prod env.

  run_prod_web_release:
    run: flutter run lib/main.dart  --dart-define=build_env=prod --release -d chrome --web-port=1234
    description: Run the app in prod env.

  run_staging_web:
    run: flutter run lib/main.dart  --dart-define=build_env=staging -d chrome --web-port=1234
    description: Run the app in staging env.

  run_staging:
    run: flutter run lib/main.dart  --dart-define=build_env=staging
    description: Run the app in staging env.


  # Helper commands
  module_checks:
    run: |
      flutter analyze
      dart fix --dry-run
      dart fix --apply
      dart format .
      flutter analyze
      flutter pub get
      flutter test --exclude-tags 'golden'
    description: Run analyze, fix, format, test a module
    exec:
      concurrency: 1
    packageFilters:
      flutter: true

  # CI Helper commands
  test_with_coverage:
    run: flutter test --exclude-tags golden --coverage --machine > test-results.json --no-pub
    description: Run all the test with coverage
    exec:
      concurrency: 1
    packageFilters:
      flutter: true
      dirExists: test

  gen_app:
    run: dart run build_runner build --delete-conflicting-outputs
    description: Run `build_runner` in all packages.
    exec:
      concurrency: 1
    packageFilters:
      dependsOn: build_runner
      ignore:
        - storybook


  # Firebase hosting
  host_web:
    run: |
      echo "Clean existing repository"
      flutter clean
      echo "Getting packages"
      flutter pub get 
      echo "Building web with Flutter"
      flutter build web --release --dart-define=build_env=prod
      echo "Deploying to Firebase"
      firebase deploy --only hosting
    description: Host flutter web page

  host_storybook:
    run: |
      cd tool/storybook
      echo "Clean existing repository"
      flutter clean
      echo "Getting packages"
      flutter pub get 
      echo "Building web with Flutter"
      flutter build web --release
      echo "Deploying to Firebase"
      firebase deploy --only hosting:wahl-consultancy-storybook-320bf-5669e --project wahl-consultancy-storybook-320bf-5669e
    description: Host flutter web page

  host_privacy_policy:
    run: |
      cd tool/privacy_policy
      echo "Deploying to Firebase"
      firebase deploy --only hosting:privacy-policy-320bf
    description: Host static privacy policy web page

  host_terms_and_conditions:
    run: |
      cd tool/terms_and_condition
      echo "Deploying to Firebase"
      firebase deploy --only hosting:terms-and-condition-320bf
    description: Host static privacy policy web page

  # Firebase function deploy
  host_functions:
    run: |
      cd tool/firebase/snowflake_management
      firebase deploy --only functions
    description: Deploy firebase functions